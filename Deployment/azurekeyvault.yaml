# This is a SecretProviderClass example using user-assigned identity to access your key vault
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: azure-kvname-podid
spec:
  provider: azure
  secretObjects:
  - secretName: contoso-customer-service-sql-password # name given to our kubernetes secret
    type: Opaque
    data:
    - objectName: contoso-customer-service-sql-password # must match objectName below
      key: contoso-customer-service-sql-password # this can be called what you want, this is to reference  
  parameters:
    usePodIdentity: "false"
    useVMManagedIdentity: "true"          # Set to true for using managed identity
    userAssignedIdentityID: $MANAGEDID    # Set the clientID of the user-assigned managed identity to use
    keyvaultName: $KEYVAULTNAME           # Set to the name of your key vault
    cloudName: ""                         # [OPTIONAL for Azure] if not provided, the Azure environment defaults to AzurePublicCloud
    objects:  |
      array:
        - |
          objectName: contoso-customer-service-sql-password
          objectType: secret
          objectVersion: ""
        - |
          objectName: contoso-customer-service-aad-tenant-id
          objectType: secret
          objectVersion: ""
    tenantId: $TENANTID                 # The tenant ID of the key vault