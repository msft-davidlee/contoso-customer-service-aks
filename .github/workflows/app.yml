on:
  push:
  workflow_dispatch:
    inputs:
      environmentselector:
        description: 'Environment selector'
        required: false
      prefix:
        description: Prefix
        required: false
      queuetype:
        description: 'Queue Type'
        required: true
        type: choice
        options:
        - ServiceBus
        - Storage        
      enablefrontdoor:
        description: 'Enable frontdoor'
        required: true
        type: boolean

jobs:
  setup:
    name: Choose Secrets Environment Job
    runs-on: windows-latest
    steps:
      - id: setup
        name: Setup Environment
        run: |
          $envSelector = "${{ github.event.inputs.environmentselector }}"
          Write-Host "Environment Selector: $envSelector Branch ${{ github.ref }}"
          if ($envSelector -eq '') {
            Write-Host "Using github.ref for choosing build_env"          
            if ('${{ github.ref }}' -eq 'refs/heads/main') { 
              echo "::set-output name=build_env::prod"              
            } else {
              echo "::set-output name=build_env::dev"              
            }
          } else {
            Write-Host "Using input for build_env"  
            echo "::set-output name=build_env::$envSelector"            
          }
    outputs:
      build_env: ${{ steps.setup.outputs.build_env }}

  build_deploy:
    name: Build and Deploy
    needs: setup
    environment: ${{ needs.setup.outputs.build_env }}
    runs-on: windows-latest
    env:
      RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP }}-${{ needs.setup.outputs.build_env }}
    steps:
      - uses: actions/checkout@v2
        with:
          path: main
      - uses: actions/checkout@v2
        with:
          repository: msft-davidlee/contoso-customer-service-app
          path: appcode

      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.MS_AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - id: resolve-inputs
        name: Resolve inputs        
        run: |
          $prefix = "${{ github.event.inputs.prefix }}"
          if ($prefix -eq '') {            
              Write-Host "Using secret for prefix"
              $prefix = "${{ secrets.PREFIX }}"
              if ($prefix -eq '') {
                  throw "secrets.PREFIX is not configured!"
              }
          }
          else {
              Write-Host "Using input for prefix"            
          }          
          echo "::set-output name=prefix::$prefix"
          $queuetype = "${{ github.event.inputs.queuetype }}"
          if ($queuetype -eq '') {            
              Write-Host "Using default for queuetype"
              $queuetype = "Storage"
          }
          else {
              Write-Host "Using input for queuetype"            
          }          
          echo "::set-output name=queuetype::$queuetype"
          $deploymentName = Get-Date -Format "yyyyMMddhhmmss"
          echo "::set-output name=deploymentname::$deploymentName"

      - id: resolve-network
        name: Resolve network
        working-directory: .\main\deployment
        run: |
          .\ResolveNetwork.ps1 -NETWORKING_PREFIX ${{ secrets.NETWORKING_PREFIX }} -BUILD_ENV ${{ needs.setup.outputs.build_env }}

      - name: Build azure environment
        id: deploy
        uses: azure/arm-deploy@v1
        with:
          deploymentName: 'aksdeploy${{ steps.resolve-inputs.outputs.deploymentname }}'
          resourceGroupName: ${{ env.RESOURCE_GROUP_NAME }}
          template: ./main/deployment/deploy.bicep
          parameters: location=${{ steps.resolve-network.outputs.location }} prefix=${{ steps.resolve-inputs.outputs.prefix }} appEnvironment=${{ needs.setup.outputs.build_env }} branch=${{ github.ref }} sqlPassword=${{ secrets.SQLPASSWORD }} subnetId=${{ steps.resolve-network.outputs.subnetId }} aksMSIId=${{ secrets.AKS_MSI_ID }} queueType=${{ steps.resolve-inputs.outputs.queuetype }}

      - id: appsdeploy
        name: Deploy apps
        run: |
          .\main\Deployment\Deploy.ps1 `
          -AKS_RESOURCE_GROUP ${{ env.RESOURCE_GROUP_NAME }} `
          -AKS_NAME ${{ steps.deploy.outputs.aksName }} `
          -NETWORKING_PREFIX ${{ secrets.NETWORKING_PREFIX }} `
          -BUILD_ENV ${{ needs.setup.outputs.build_env }} `
          -AppCode appcode `
          -DeployCode main `
          -DbName ${{ steps.deploy.outputs.dbname }} `
          -SqlServer ${{ steps.deploy.outputs.sqlserver }} `
          -SqlUsername ${{ steps.deploy.outputs.sqlusername }} `
          -SqlPassword ${{ secrets.SQLPASSWORD }} `
          -Backend ${{ steps.deploy.outputs.backend }} `
          -AAD_INSTANCE ${{ steps.deploy.outputs.aadinstance }} `
          -AAD_TENANT_ID ${{ secrets.AAD_TENANT_ID }} `
          -AAD_DOMAIN ${{ secrets.AAD_DOMAIN }} `
          -AAD_CLIENT_ID ${{ secrets.AAD_CLIENT_ID }} `
          -AAD_CLIENT_SECRET ${{ secrets.AAD_CLIENT_SECRET }} `
          -QueueType ${{ steps.resolve-inputs.outputs.queuetype }} `
          -EnableFrontdoor $${{ github.event.inputs.enablefrontdoor == 'true' }}

      - name: Build frontdoor
        id: deployfrontdoor
        if: ${{ github.event.inputs.enablefrontdoor == 'true' }}
        uses: azure/arm-deploy@v1
        with:
          deploymentName: 'aksdeployfd${{ steps.resolve-inputs.outputs.deploymentname }}'
          resourceGroupName: ${{ env.RESOURCE_GROUP_NAME }}
          template: ./main/deployment/frontdoor.bicep
          parameters: stackName=${{ steps.deploy.outputs.stackname }} appEnvironment=${{ needs.setup.outputs.build_env }} branch=${{ github.ref }} serviceIP=${{ steps.appsdeploy.outputs.serviceip }} 
