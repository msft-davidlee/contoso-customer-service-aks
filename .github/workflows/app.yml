on:
  push:
    paths-ignore:
      - "README.md"
  workflow_dispatch:
    inputs:
      environmentselector:
        description: "Environment selector"
        required: false
env:
  APP_VERSION: 'v5.1'
  BACKEND_FUNC_STORAGE_SUFFIX: 'backendapp'
  STORAGE_QUEUE_SUFFIX: 'db'
  STACK_NAME_TAG: 'contoso-customer-service-aks'

jobs:
  setup:
    name: Choose Secrets Environment Job
    runs-on: windows-latest
    steps:
      - id: setup
        name: Setup Environment
        run: |
          $envSelector = "${{ github.event.inputs.environmentselector }}"
          Write-Host "Environment Selector: $envSelector Branch ${{ github.ref }}"
          if ($envSelector -eq '') {
            Write-Host "Using github.ref for choosing build_env"      
            if ('${{ github.ref }}' -eq 'refs/heads/main') {
              echo "::set-output name=build_env::prod"
            } else {
              echo "::set-output name=build_env::dev"
            }
          } else {
            Write-Host "Using input for build_env"
            echo "::set-output name=build_env::$envSelector"            
          }
    outputs:
      build_env: ${{ steps.setup.outputs.build_env }}

  cd_deploy:
    name: Deploy Azure Environment
    needs: setup
    environment: ${{ needs.setup.outputs.build_env }}
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.MS_AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - id: resolve-shared-resources
        name: Resolve shared resources
        working-directory: .\deployment
        run: |
          .\ResolveSharedResources.ps1 `
          -stackNameTag ${{ env.STACK_NAME_TAG }} `
          -BUILD_ENV ${{ needs.setup.outputs.build_env }} `
          -Prefix ${{ secrets.PREFIX }}

      - name: Build azure environment
        id: deploy
        uses: azure/arm-deploy@v1
        with:
          deploymentName: "deploy-${{ needs.setup.outputs.build_env }}-${{ github.run_number }}"
          resourceGroupName: ${{ steps.resolve-shared-resources.outputs.appResourceGroup }}
          template: ./deployment/deploy.bicep
          parameters: >
            version=${{ github.run_number }}
            location=${{ steps.resolve-shared-resources.outputs.location }}
            keyVaultName=${{ steps.resolve-shared-resources.outputs.keyVaultName }}
            queueType=${{ steps.resolve-shared-resources.outputs.queueType }}
            prefix=${{ secrets.PREFIX }}
            appEnvironment=${{ needs.setup.outputs.build_env }}
            branch=${{ github.ref }}
            keyVaultName=${{ steps.resolve-shared-resources.outputs.keyVaultName }}
            sharedResourceGroup=${{ steps.resolve-shared-resources.outputs.sharedResourceGroup }}
            nodesResourceGroup=${{ steps.resolve-shared-resources.outputs.nodesResourceGroup }}
            subnetId=${{ steps.resolve-shared-resources.outputs.subnetId }}
            aksMSIId=${{ steps.resolve-shared-resources.outputs.managedIdentityId }}
            backendFuncStorageSuffix=${{ env.BACKEND_FUNC_STORAGE_SUFFIX }}
            storageQueueSuffix=${{ env.STORAGE_QUEUE_SUFFIX }}
            stackNameTag=${{ env.STACK_NAME_TAG }}
    outputs:
      managedIdentityId: ${{ steps.deploy.outputs.managedIdentityId }}
      queueName: ${{ steps.deploy.outputs.queueName }}
      queueType: ${{ steps.resolve-shared-resources.outputs.queueType }}
      enableApplicationGateway: ${{ steps.resolve-shared-resources.outputs.enableApplicationGateway }}      
      location: ${{ steps.resolve-shared-resources.outputs.location }}

  deploy_apps:
    name: Deploy apps
    needs:
      - setup
      - cd_deploy
    runs-on: windows-latest
    environment: dev
    steps:
      - uses: actions/checkout@v2

      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.MS_AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - id: appsdeploy
        name: Deploy apps
        run: |
          .\Deployment\Deploy.ps1 `
          -QueueName ${{ needs.cd_deploy.outputs.queueName }} `
          -QueueType ${{ needs.cd_deploy.outputs.queueType }} `
          -BUILD_ENV ${{ needs.setup.outputs.build_env }} `
          -APP_VERSION ${{ env.APP_VERSION }} `
          -AKSMSIId ${{ needs.cd_deploy.outputs.managedIdentityId }} `
          -BACKEND_FUNC_STORAGE_SUFFIX ${{ env.BACKEND_FUNC_STORAGE_SUFFIX }} `
          -STORAGE_QUEUE_SUFFIX ${{ env.STORAGE_QUEUE_SUFFIX }} `
          -STACK_NAME_TAG ${{ env.STACK_NAME_TAG }} `
          -EnableApplicationGateway ${{ needs.cd_deploy.outputs.enableApplicationGateway }} `
          -Location ${{ needs.cd_deploy.outputs.location }}

      # - id: resolve-shared-resources
      #   if: needs.cd_deploy.outputs.enableApplicationGateway == 'true'
      #   name: Resolve shared resources
      #   working-directory: .\deployment
      #   run: |
      #     .\ResolveSharedResources.ps1 `
      #     -stackNameTag ${{ env.STACK_NAME_TAG }} `
      #     -BUILD_ENV ${{ needs.setup.outputs.build_env }} `
      #     -Prefix ${{ secrets.PREFIX }}

      # - name: Build azure environment
      #   if: needs.cd_deploy.outputs.enableApplicationGateway == 'true'
      #   id: deployappgw
      #   uses: azure/arm-deploy@v1
      #   with:
      #     deploymentName: "deploy-agw-${{ needs.setup.outputs.build_env }}-${{ github.run_number }}"
      #     resourceGroupName: ${{ steps.resolve-shared-resources.outputs.appResourceGroup }}
      #     template: ./deployment/applicationgateway.bicep
      #     parameters: >
      #       prefix=${{ secrets.PREFIX }}
      #       appEnvironment=${{ needs.setup.outputs.build_env }}
      #       staticIPResourceId=${{ steps.resolve-shared-resources.outputs.staticIPResourceId }}
      #       stackNameTag=${{ env.STACK_NAME_TAG }}
      #       branch=${{ github.ref }}
      #       location=${{ steps.resolve-shared-resources.outputs.location }}
      #       version=${{ github.run_number }}
      #       aksMSIId=${{ steps.resolve-shared-resources.outputs.managedIdentityId }}
      #       keyVaultName=${{ steps.resolve-shared-resources.outputs.keyVaultName }}
      #       subnetId=${{ steps.resolve-shared-resources.outputs.appGwsubnetId }}

      # - id: enable-application-gateway-add-on
      #   if: needs.cd_deploy.outputs.enableApplicationGateway == 'true'
      #   name: Enable Application Gateway Add-on
      #   working-directory: .\deployment
      #   run: |
      #     .\EnableAGICAddOn.ps1 `
      #     -AKSName ${{ steps.appsdeploy.outputs.aksName }} `
      #     -AKResourceGroupName ${{ steps.resolve-shared-resources.outputs.appResourceGroup }} `
      #     -Location ${{ needs.cd_deploy.outputs.location }}

  deploy_db:
    name: Deploy database
    needs:    
      - setup
      - cd_deploy
    runs-on: windows-latest
    environment: dev
    steps:
      - uses: actions/checkout@v2

      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.MS_AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - id: resolve-sql-connectionstring
        name: Resolve SQL connection string
        working-directory: .\deployment
        run: |
          .\ResolveSqlConnection.ps1 `
          -APP_VERSION ${{ env.APP_VERSION }} `
          -BUILD_ENV ${{ needs.setup.outputs.build_env }} `
          -StackNameTag ${{ env.STACK_NAME_TAG }} `
          -TEMPDIR ${{ github.workspace }}

      - id: deploy_db
        name: Deploy database
        uses: azure/sql-action@v1.2
        with:
          connection-string: ${{ steps.resolve-sql-connectionstring.outputs.sqlConnectionString }}
          dacpac-package: ${{ steps.resolve-sql-connectionstring.outputs.dacpac }}

      - id: add_mock_data
        name: Add mock data in database
        uses: azure/sql-action@v1.2
        with:
          connection-string: ${{ steps.resolve-sql-connectionstring.outputs.sqlConnectionString }}
          sql-file: ${{ steps.resolve-sql-connectionstring.outputs.sqlFile }}         

  cleanup:
    name: Clean up
    if: needs.setup.outputs.build_env == 'prod'
    needs: setup
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.MS_AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - id: removedevresources
        name: Remove Dev Resources
        run: |
          .\Deployment\RemoveDevResources.ps1 -stackNameTag=${{ env.STACK_NAME_TAG }}
