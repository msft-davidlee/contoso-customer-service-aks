on:
  push:
    paths-ignore:
      - "README.md"
  workflow_dispatch:
    inputs:
      environmentselector:
        description: "Environment selector"
        required: false

jobs:
  setup:
    name: Choose Secrets Environment Job
    runs-on: windows-latest
    steps:
      - id: setup
        name: Setup Environment
        run: |
          $envSelector = "${{ github.event.inputs.environmentselector }}"
          Write-Host "Environment Selector: $envSelector Branch ${{ github.ref }}"
          if ($envSelector -eq '') {
            Write-Host "Using github.ref for choosing build_env"          
            if ('${{ github.ref }}' -eq 'refs/heads/main') { 
              echo "::set-output name=build_env::prod"              
            } else {
              echo "::set-output name=build_env::dev"              
            }
          } else {
            Write-Host "Using input for build_env"  
            echo "::set-output name=build_env::$envSelector"            
          }
    outputs:
      build_env: ${{ steps.setup.outputs.build_env }}

  build_deploy:
    name: Build and Deploy
    needs: setup
    environment: ${{ needs.setup.outputs.build_env }}
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.MS_AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - id: resolve-shared-resources
        name: Resolve shared resources
        working-directory: .\deployment
        run: |
          .\ResolveSharedResources.ps1 -BUILD_ENV ${{ needs.setup.outputs.build_env }}

      - name: Build azure environment
        id: deploy
        uses: azure/arm-deploy@v1
        with:
          deploymentName: "deploy-${{ needs.setup.outputs.build_env }}-${{ github.run_number }}"
          resourceGroupName: ${{ steps.resolve-shared-resources.outputs.appResourceGroup }}
          template: ./deployment/deploy.bicep
          parameters: >
            version=${{ github.run_number }}
            location=${{ steps.resolve-shared-resources.outputs.location }}
            keyVaultName=${{ steps.resolve-shared-resources.outputs.keyVaultName }}
            queueType=${{ steps.resolve-shared-resources.outputs.queueType }}
            prefix=${{ secrets.PREFIX }}
            appEnvironment=${{ needs.setup.outputs.build_env }}
            branch=${{ github.ref }}
            keyVaultName=${{ steps.resolve-shared-resources.outputs.keyVaultName }}
            sharedResourceGroup=${{ steps.resolve-shared-resources.outputs.sharedResourceGroup }}
            subnetId=${{ steps.resolve-shared-resources.outputs.subnetId }}
            aksMSIId=${{ steps.resolve-shared-resources.outputs.managedIdentityId }}            

      - id: appsdeploy
        name: Deploy apps
        run: |
          .\Deployment\Deploy.ps1 `
          -AKS_RESOURCE_GROUP ${{ steps.resolve-shared-resources.outputs.appResourceGroup }} `
          -AKS_NAME ${{ steps.deploy.outputs.aksName }} `
          -BUILD_ENV ${{ needs.setup.outputs.build_env }} `
          -DbName ${{ steps.deploy.outputs.dbname }} `
          -SqlServer ${{ steps.deploy.outputs.sqlserver }} `
          -SqlUsername ${{ steps.deploy.outputs.sqlusername }} `
          -Backend ${{ steps.deploy.outputs.backend }} `
          -QueueType ${{ steps.resolve-shared-resources.outputs.queueType }} `
          -EnableFrontdoor $${{ steps.resolve-shared-resources.outputs.enableFrontdoor == 'true' }}

      - name: Build frontdoor
        id: deployfrontdoor
        if: ${{ steps.resolve-shared-resources.outputs.enableFrontdoor == 'true' }}
        uses: azure/arm-deploy@v1
        with:
          deploymentName: "deployfd-${{ needs.setup.outputs.build_env }}-${{ github.run_number }}"
          resourceGroupName: ${{ env.RESOURCE_GROUP_NAME }}
          template: ./deployment/frontdoor.bicep
          parameters: >
            stackName=${{ steps.deploy.outputs.stackname }}
            appEnvironment=${{ needs.setup.outputs.build_env }} 
            branch=${{ github.ref }}
            serviceIP=${{ steps.appsdeploy.outputs.serviceip }}

  cleanup:
    name: Clean up
    if: needs.setup.outputs.build_env == 'prod'
    needs: setup
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.MS_AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - id: removedevresources
        name: Remove Dev Resources
        run: |
          .\Deployment\RemoveDevResources.ps1
